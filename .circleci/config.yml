version: 2

workflows:
  version: 2
  tests_after_push_feature:
    jobs:
      - check_if_version_updated:
          context: "dev.chainstack | GCP"
          filters:
            branches:
              only:
                - /(feature|bug|hotfix|release)\/.*/
      - check_release_notes_updated:
          context: "dev.chainstack | GCP"
          filters:
            branches:
              only:
                - /(feature|bug|hotfix|release)\/.*/
      - test:
          requires:
            - check_if_version_updated
            - check_release_notes_updated
          filters:
            branches:
              only:
                - /(feature|bug|hotfix|release)\/.*/
      - deploy_dev_hold:
          type: approval
          requires:
            - test
          filters:
            branches:
              only:
                - /(feature|bug|hotfix|release)\/.*/
      - build_dev_image:
          context: "dev.chainstack | GCP"
          requires:
            - deploy_dev_hold
      - deploy_dev:
          context: "dev.chainstack | GCP"
          requires:
            - build_dev_image

  create_release_after_merge_to_master:
    jobs:
      - rerun_related_workflows:
          context: "CITool"
          filters:
            branches:
              only: master
      - build_prod_image:
          context: "prod.chainstack | GCP"
          filters:
            branches:
              only:
               - master
      - create_release_tag:
          context: "CITool"
          requires:
            - build_prod_image

  deploy_after_create_release:
    jobs:
      - hold_deploy_prod:
          type: approval
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
      - deploy_prod:
          context: "prod.chainstack | GCP"
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
          requires:
            - hold_deploy_prod

_run:
  gcloud_routine: &gcloud_routine
    name: gcloud routine
    command: |
      set -x
      echo $GCLOUD_SERVICE_KEY > /gcloud-service-key.json
      gcloud auth activate-service-account --key-file=/gcloud-service-key.json
      gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
      gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
      gcloud auth configure-docker --quiet
  
  persist_build_num: &persist_build_num
    name: Saving build number to workflow context
    command: |
      mkdir -p workflow_context
      echo "${CIRCLE_BUILD_NUM}" > workflow_context/build_tag

_job_deploy: &deploy
  docker:
      - image: chainstack/builder:latest
  steps:
    - checkout
    - run: *gcloud_routine
    - run:
        name: gcloud clusters get-credentials
        command: |
            gcloud --quiet container clusters get-credentials ${GOOGLE_CLUSTER_NAME} --region ${GOOGLE_REGION} --project ${GOOGLE_PROJECT_ID}
    - run:
       name: Helming
       command: |
        set -x
        helm3 repo add stable https://charts.helm.sh/stable
        helm3 repo add cs ${HELM_REPO}
        helm3 repo update
    - run:
       name: Rolling out the service
       command: |
        set -x
        IMAGE_TAG_SALT=`printf '%s\n' "${!IMAGE_TAG_SALT}"`
        IMAGE_TAG="`printf '%s\n' "${!IMAGE_TAG}" | sed -e "s:/:_:g"`${IMAGE_TAG_SALT}"
        helm3 upgrade docs cs/chainstack-docs \
          --install --wait --timeout 180s \
          --set image.tag=${IMAGE_TAG},ingress.host=${DOCS_HOSTNAME},project=${GOOGLE_PROJECT_ID},auth.enabled=${AUTH_ENABLED}
        sleep 10 # TODO: Implement k8s jobs for Post-deploy
        helm3 status docs

_job_build_image: &build_image
  docker:
    - image: chainstack/builder:latest
  steps:
    - setup_remote_docker:
       version: 20.10.14
    - checkout
    - run: *gcloud_routine
    - run: *persist_build_num
    - run:
        name: Create service version
        command: |
          set -x
          sed -i -e "s:{BUILD_NUM}:${CIRCLE_BUILD_NUM}.${CIRCLE_BRANCH}:g" ./VERSION
    - run:
       name: Build image
       command: |
         set -x
         IMAGE_NAME=${GOOGLE_GCR_HOSTNAME}/${GOOGLE_PROJECT_ID}/${CIRCLE_PROJECT_REPONAME}
         IMAGE_TAG_SALT=`printf '%s\n' "${!IMAGE_TAG_SALT}"`
         IMAGE_TAG="`printf '%s\n' "${!IMAGE_TAG}" | sed -e "s:/:_:g"`${IMAGE_TAG_SALT}"
         docker build \
           --build-arg CONSOLE_HOSTNAME=${HOSTNAME} \
           --build-arg WEBSITE_HOSTNAME=${WEBSITE_HOSTNAME} \
           --build-arg DOCS_HOSTNAME=${DOCS_HOSTNAME} \
           --build-arg ALGOLIA_KEY=${ALGOLIA_KEY} \
           --build-arg GA_ID=${GA_ID} \
           -t ${GOOGLE_PROJECT_ID}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1} .
         docker tag ${GOOGLE_PROJECT_ID}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1} ${IMAGE_NAME}:${IMAGE_TAG}
         docker push ${IMAGE_NAME} -a
    - persist_to_workspace: # We need to store build tag from this job
        root: workflow_context
        paths:
          - build_tag

jobs:
  test:
    docker:
      - image: circleci/node:16
    environment:
      IMAGE_TAG: "CIRCLE_BRANCH"
      IMAGE_TAG_SALT: "CIRCLE_SHA1"
    steps:
      - checkout
      - run:
          name: Check merge with master
          command: |
            git config user.name CITool
            git config user.email citool@chainstack.com
            git merge master -m "Fake merge master, just for tests image" || ( echo "Failed to merge with master. Rebase your branch."; exit 99 )
      - run: yarn install
      - run: yarn run build
      - run: yarn run check-md

  check_if_version_updated:
    working_directory: /home/circleci/project
    docker:
      - image: circleci/node:16
    steps:
      - checkout
      - run:
          name: Check if VERSION was updated
          command: |
            git diff --quiet master..${CIRCLE_BRANCH} VERSION && exit 99 || echo "Seems updated"

  check_release_notes_updated:
    working_directory: /home/circleci/project
    docker:
      - image: circleci/node:16
    environment:
      IMAGE_TAG: "CIRCLE_BRANCH"
      IMAGE_TAG_SALT: "CIRCLE_SHA1"
    steps:
      - checkout
      - run:
          name: Check if Release Notes was updated
          command: |
            git diff --quiet master..${CIRCLE_BRANCH} docs/release-notes.md && exit 99 || echo "Seems updated"

  build_dev_image:
    environment:
      IMAGE_TAG: "CIRCLE_BRANCH"
      IMAGE_TAG_SALT: "CIRCLE_SHA1"
    <<: *build_image
  
  deploy_dev:
    environment:
      IMAGE_TAG: "CIRCLE_BRANCH"
      IMAGE_TAG_SALT: "CIRCLE_SHA1"
    <<: *deploy
  
  rerun_related_workflows:
    working_directory: /app
    docker:
      - image: chainstack/citool:v2.1.1
    steps:
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Rerun related workflows
          command: |
            set -x
            /root/.poetry/bin/poetry run python -m citool webhook rerun-related-workflows --git-repo chainstack/docs --git-target-branch master --ci-project ${CIRCLE_PROJECT_REPONAME} --ci-username ${CIRCLE_PROJECT_USERNAME}

  build_prod_image:
    environment:
      IMAGE_TAG: "CIRCLE_BUILD_NUM"
      IMAGE_TAG_SALT: "EMPTY"
    <<: *build_image
  
  create_release_tag:
    working_directory: /app
    docker:
      - image: chainstack/citool:v2.1.1
    steps:
      - attach_workspace:
          at: /tmp/workflow_context  # we need to get build tag from previous job
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Create release
          command: |
            set -x
            BUILD_TAG=`cat /tmp/workflow_context/build_tag`
            /root/.poetry/bin/poetry run python -m citool release create --git-repo chainstack/docs --git-target-branch master --build-num ${BUILD_TAG}

  deploy_prod:
    environment:
      IMAGE_TAG: "CIRCLE_TAG"
      IMAGE_TAG_SALT: "EMPTY"
    <<: *deploy
